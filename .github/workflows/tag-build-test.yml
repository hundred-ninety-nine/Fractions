name: Tag, build, test
on:
  pull_request:
    branches: [ master ]
    paths-ignore: [ '**.md' ]
  push:
    branches: [ master ]
    paths-ignore: [ '**.md' ]
jobs:
  tag:
    if: "!startsWith(github.event.head_commit.message, 'bump version file')"
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.retrieve_and_increment_tag.outputs.latest_tag }}
      latest_commit: ${{ steps.retrieve_and_increment_tag.outputs.latest_commit }}
    steps:
      - name: Delay up to 5 seconds
        run: |
          # Generate a random number between 0 and 32767
          random_number=$RANDOM
          echo "random_number=$random_number"
          
          # Scale the random number to a range between 0 and 5
          random_delay=$(echo "$random_number % 6" | bc)
          
          # Sleep for the random delay
          echo "Simulating delay of $random_delay second(s) to increase chance of race condition..."
          sleep "$random_delay" 
      - uses: ben-z/gh-action-mutex@v1.0.0-alpha.9
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: retrieve_and_increment_tag
        run: |
          tag_pattern="[0-9]*.[0-9]*.[0-9]*"
          version_pattern="(.*)([0-9]+\.[0-9]+\.[0-9]+-?[a-zA-Z0-9]*)(.*)"
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          tag=$(git for-each-ref --sort=-committerdate --count=1 --format '%(refname)' "refs/tags/$tag_pattern" | cut -d / -f 3-)
          tag_commit=$(git rev-list -n 1 $tag)
          echo "$ts [  TAG] GitHub Run ID is ${{ github.run_id }} - Latest tag is $tag ($tag_commit)"
          echo "latest_tag=$tag" >> $GITHUB_OUTPUT
          echo "latest_commit=$tag_commit" >> $GITHUB_OUTPUT
          # Extract the major, minor, and patch parts of the version
          IFS='.' read -r -a version_parts <<< "$tag"
          major="${version_parts[0]}"
          minor="${version_parts[1]}"
          patch="${version_parts[2]}"
        
          # Increment the patch version
          patch=$((patch + 1))
        
          # Form the new version
          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Delay up to 5 seconds
        run: |
          # Generate a random number between 0 and 32767
          random_number=$RANDOM
          echo "random_number=$random_number"
          
          # Scale the random number to a range between 0 and 5
          random_delay=$(echo "$random_number % 6" | bc)
          
          # Sleep for the random delay
          echo "Simulating delay of $random_delay second(s) to increase chance of race condition..."
          sleep "$random_delay" 

      - name: Create new tag
        if: github.ref == 'refs/heads/master'
        run: |
          new_version=${{ steps.retrieve_and_increment_tag.outputs.new_version }}
          git tag -f "$new_version"
          git push -f --tags

  build:
    needs: tag
    runs-on: ubuntu-latest
    steps:
      - run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "$ts [BUILD] GitHub Run ID: ${{ github.run_id }} - Latest tag is ${{ needs.tag.outputs.latest_tag  }} (${{ needs.tag.outputs.latest_commit  }})"

  test:
    needs: 
      - tag
      - build
    runs-on: ubuntu-latest
    steps:
      - run: |
          ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "$ts [ TEST] GitHub Run ID: ${{ github.run_id }} - Latest tag is ${{ needs.tag.outputs.latest_tag  }} (${{ needs.tag.outputs.latest_commit  }})"
